#!/usr/bin/env node
require('coffee-script');

// Global Scope
global._ = require('underscore');
global._.str = require('underscore.string');
global._.date = require('moment'); // underscore.date

// Local Scope
var path = require('path')
  , util = require('util')
  , http = require('http')
  , argv = require('optimist').argv
  , cpus = require('os').cpus().length
  , hooker = require('hooker')
  , cluster = require('cluster');

// Colorize log
hooker.hook(console, ['log', 'info', 'warn', 'error'], {
  passName: true,
  pre: function (lv, log) {
    switch(lv) {
      case 'log':   util.print("\x1b[37m"); break;
      case 'info':  util.print("\x1b[32m"); break;
      case 'warn':  util.print("\x1b[33m"); break;
      case 'error': util.print("\x1b[31m"); break;
      default: return hooker.preempt();
    }
  },
  post: function (res, name) {
    util.print('\x1b[0m');
  }
});

// Args Parser
if (argv.h) {
  console.warn('Usage:', path.basename(process.argv[1]), '[arguments]');
  console.log('  -p "port"       set listening port (3000 default)');
  console.log('  -f "fork"       process concurrency nums ('+cpus+' default)');
  console.log('  -e "env"        set application environment (development default)');
  console.log('  -h              show this message');
  process.exit(1);
}

// Environments
process.env.NODE_ENV = process.env.NODE_ENV || argv.e || argv.env || 'development';
process.env.PORT = process.env.PORT || argv.p || argv.port || 3000;
process.env.FORK = process.env.FORK || argv.f || argv.FORK || cpus;

// Main Application
var app = require(path.resolve('config', 'app'))
  , env = app.get('env')
  , port = app.get('port')
  , exec = require('child_process').exec;

// Cluster Server
if (cluster.isMaster) {
  console.log('==', 'Express has left the station on', port, 'for', env);
  var i = 0;
  for (i = 0; i < process.env.FORK; i++) { cluster.fork(); }
  cluster.on('exit', function (worker) {
    console.error('>>', 'HTTPServer#dead', '@'+worker.process.pid, '#'+worker.process.exitCode);
    cluster.fork();
  });
  cluster.on('listening', function(worker, address) {
    console.log('>>', 'HTTPServer#start', '@'+process.pid);
  });
  // Memory Monitor
  setInterval(function () {
    var memusage = process.memoryUsage();
    console.info([
      'report  -  Physical: ',
      parseInt(memusage.rss / 1024 / 10.24) / 100,
      '  -  Heap: ',
      parseInt(memusage.heapUsed / 1024 / 10.24) / 100,
      ' / ' + parseInt(memusage.heapTotal / 1024 / 10.24) / 100
    ].join(''));
  }, 5 * 1000);
} else {
  server = http.createServer(app);
  require(path.resolve('config', 'io'))(app, server);
  server.listen(port);
}

